# @ Replace all instances of @ within this template with appropriate values for your
# @ particular use case. Then remove all lines within this file containing "@"

# @ "products" YAML files are used to specify which products are valid for a given
# @            source within GeoIPS, and specify additional parameters required to
# @            generate a particular product for a given source (ie, variables, data
# @            ranges, etc)
# @            Any fields that are specified within "products" will override
# @            those within "product_defaults"

interface: products
family: list
# @ This uniquely identifies the product list plugin
name: amsr2_family
# @ Include your own descriptive docstring that describes this list of products.
docstring: |
  AMSR-2 product, fully defined using a family

spec:
  products:
    # @ name is the *case-sensitive* identifier for an individual product
    # @ By convention, product names should use '-' as a delimeter and start each word
    # @ with a capital letter.
    - name: 89-PCT-Family

      # @ source_name must be a valid geoips "source_name".
      # @ Presently, this can only be found by examining the reader for that particular
      # @ data type.
      # @ Readers may be specified in any plugin package, not just this one or the main
      # @ GeoIPS package.
      source_name: amsr2

      # @ Include your own descriptive docstring that describes this particular product.
      docstring: |
        The amsr2_family implementation of 89 MHz Polarization Corrected
        Brightness Temperature.

      # @ "family" is a string that identifies the valid fields within this product.
      # @ These are currently specified within geoips/schema/product_defaults
      # @ - your product type must match a valid schema.
      # @ The product "family" also specifies what operations must be applied to the dataset
      # @ for a given product, and in what order.  The processing workflows handle
      # @ ensuring each step is applied appropriately based on the product "family"
      # @ Thus, only supported product families will behave appropriately within
      # @ GeoIPS.  If a new unsupported order of operations is required for a given
      # @ product, support for that product_type must be added in the main GeoIPS
      # @ infrastructure - please contact the GeoIPS Team if you require a new
      # @ product_type.
      family: interpolator_algorithm_colormap

      spec:
        # @ Variables must match variable names found in the reader for this data type!
        variables: ["tb89hA", "tb89vA"] #

        algorithm:
          plugin:
            # @ The algorithm "name' specifies a geoips algorithm plugin installed
            # @ via entry points, in any repository.
            # @ This string must match the "name" attribute on the algorith plugin,
            # @ which will also match the portion of the entry point in
            # @ pyproject.toml that comes before the '=',
            # @ ie, 'single_channel' or 'pmw_89pct' as found in
            # @ geoips/pyproject.toml project.entry-points."geoips.algorithms".
            name: pmw_89test
            # @ Additional arguments to pass directly to the algorithm plugin.
            # @ If none are required, pass {}
            # @ Fields under "arguments" must match arguments within your
            # @ specified algorithm plugin.
            arguments:
              output_data_range: [105.0, 280.0]
              min_outbounds: crop
              max_outbounds: mask
              norm: null
              inverse: null
        colormap:
          plugin:
            # @ The colormap "name" specifies a geoips colormap plugin installed
            # @ via entry points, in any repository.
            # @ This string must match the "name" attribute on the colormap plugin,
            # @ which will also match the portion of the entry point in
            # @ pyproject.toml that comes before the '=',
            # @ geoips/pyproject.toml project.entry-points."geoips.colormaps".
            # @ ie, 'visir.Infrared' or 'matplotlib_linear_norm' as found in geoips/setup.py 'geoips.user_colormaps'.
            name: pmw_89pct
            # @ Additional arguments to pass directly to the colormap plugin.
            # @ If none are required, pass {}
            # @ Fields under "arguments" must match arguments within your
            # @ specified colormap plugin.
            arguments:
              data_range: [105, 280]
        interpolator:
          plugin:
            # @ The colormap "name" specifies a geoips interpolator plugin installed
            # @ via entry points, in any repository.
            # @ This string must match the "name" attribute on the interpolator plugin,
            # @ which will also match the portion of the entry point in
            # @ geoips/pyproject.toml project.entry-points."geoips.interpolator".
            # @ ie, 'pyresample_wrappers.interp_nearest' or 'scipy_wrappers.interp_grid'
            # @ Interpolation routines are used when reprojecting to a requested
            # @ area definition.
            name: interp_gauss
            # @ Additional arguments to pass directly to the interpolator plugin.
            # @ If none are required, pass {}
            # @ Fields under "arguments" must match arguments within your
            # @ specified interpolator plugin.
            arguments:
              sigmaval: 10000
        coverage_checker:
          plugin:
            # @ The coverage_checker "name" specifies a geoips coverage_checker
            # @ plugin installed via entry points, in any repository.
            # @ This string must match the "name" attribute on the coverage_checker
            # @ plugin which will also match the portion of the entry point in
            # @ geoips/pyproject.toml project.entry-points."geoips.coverage_checkers".
            # @ Coverage checks are used to
            # @   a) determine if there is sufficient coverage to product a product and
            # @   b) include % coverage in filename and metadata if required.
            name: masked_arrays
            # @ Additional arguments to pass directly to the coverage_checker plugin.
            # @ If none are required, pass {}
            # @ Fields under "arguments" must match arguments within your
            # @ specified coverage_checker plugin.
            arguments: {}
